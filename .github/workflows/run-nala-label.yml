name: Nala Tests Label Trigger

on:
  pull_request:
    types: [ labeled, opened, synchronize, reopened, ready_for_review, converted_to_draft, submitted ]

jobs:
  manage-ready-for-review-label:
    name: Manage Ready for Review Label
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && (
        github.event.action == 'opened' ||
        github.event.action == 'ready_for_review' ||
        github.event.action == 'converted_to_draft'
      )
    steps:
      - name: Add Ready for review label (non-draft PRs)
        if: github.event.pull_request.draft == false
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            // Add the "Ready for review" label
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: number,
              labels: ['Ready for review']
            });
            
            console.log(`Added "Ready for review" label to PR #${number}`);

      - name: Remove Ready for review label (draft PRs)
        if: github.event.pull_request.draft == true
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            // Remove the "Ready for review" label
            await github.rest.issues.removeLabel({
              owner,
              repo,
              issue_number: number,
              name: 'Ready for review'
            });
            
            console.log(`Removed "Ready for review" label from PR #${number}`);

  manage-qa-labels:
    name: Manage Ready for QA Labels
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && (
        github.event.action == 'submitted' ||
        github.event.action == 'opened' ||
        github.event.action == 'synchronize' ||
        github.event.action == 'reopened' ||
        github.event.action == 'labeled' ||
        github.event.action == 'unlabeled'
      )
    steps:
      - name: Check approvals and manage QA labels
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            console.log(`Workflow triggered for PR #${number}, action: ${context.payload.action}`);
            
            // Get PR reviews
            const reviews = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number: number
            });
            
            // Count approvals and check for request changes
            let approvalCount = 0;
            let hasRequestChanges = false;
            
            // Check for test mode label
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });
            
            const labels = pr.data.labels.map(label => label.name);
            const isTestMode = labels.includes('test-qa-workflow');
            
            if (isTestMode) {
              console.log(`Test mode enabled for PR #${number} - simulating 2 approvals`);
              approvalCount = 2;
              hasRequestChanges = false;
            } else {
              for (const review of reviews.data) {
                if (review.state === 'APPROVED') {
                  approvalCount++;
                } else if (review.state === 'CHANGES_REQUESTED') {
                  hasRequestChanges = true;
                }
              }
            }
            
            console.log(`PR #${number}: ${approvalCount} approvals, hasRequestChanges: ${hasRequestChanges}`);
            
            // If 2+ approvals and no request changes, move to Ready for QA
            if (approvalCount >= 2 && !hasRequestChanges) {
              console.log(`Moving to Ready for QA - ${approvalCount} approvals, no request changes`);
              // Remove Ready for review label (try both variations)
              const reviewLabels = ['Ready for review', 'Ready for Review'];
              for (const labelName of reviewLabels) {
                try {
                  await github.rest.issues.removeLabel({
                    owner,
                    repo,
                    issue_number: number,
                    name: labelName
                  });
                  console.log(`Removed "${labelName}" label from PR #${number}`);
                  break; // Exit loop if successful
                } catch (error) {
                  console.log(`"${labelName}" label not found on PR #${number}`);
                }
              }
              
              // Add Ready for QA label
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: number,
                labels: ['Ready for QA']
              });
              console.log(`Added "Ready for QA" label to PR #${number}`);
            } 
            // If less than 2 approvals or has request changes, ensure Ready for review
            else if (approvalCount < 2 || hasRequestChanges) {
              console.log(`Moving to Ready for review - ${approvalCount} approvals, hasRequestChanges: ${hasRequestChanges}`);
              // Remove Ready for QA label if it exists
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: number,
                  name: 'Ready for QA'
                });
                console.log(`Removed "Ready for QA" label from PR #${number}`);
              } catch (error) {
                console.log(`"Ready for QA" label not found on PR #${number}`);
              }
              
              // Add Ready for review label if PR is not draft
              if (!pr.data.draft) {
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: number,
                  labels: ['Ready for review']
                });
                console.log(`Added "Ready for review" label to PR #${number}`);
              }
            } else {
              console.log(`No action taken - ${approvalCount} approvals, hasRequestChanges: ${hasRequestChanges}`);
            }

  action:
    name: Running Nala E2E UI Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      contains(join(github.event.pull_request.labels.*.name, ' '), 'run-nala')

    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set execute permission for nalarun.sh
        run: chmod +x ./nala/utils/pr.run.sh

      - name: Run Nala Tests via pr.run.sh
        run: ./nala/utils/pr.run.sh
        env:
          labels: ${{ join(github.event.pull_request.labels.*.name, ' ') }}
          branch: ${{ github.event.pull_request.head.ref }}
          repoName: ${{ github.repository }}
          prUrl: ${{ github.event.pull_request.head.repo.html_url }}
          prOrg: ${{ github.event.pull_request.head.repo.owner.login }}
          prRepo: ${{ github.event.pull_request.head.repo.name }}
          prBranch: ${{ github.event.pull_request.head.ref }}
          prBaseBranch: ${{ github.event.pull_request.base.ref }}
          GITHUB_ACTION_PATH: ${{ github.workspace }}
          IMS_EMAIL: ${{ secrets.IMS_EMAIL }}
          IMS_PASS: ${{ secrets.IMS_PASS }}


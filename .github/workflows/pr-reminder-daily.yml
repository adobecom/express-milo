name: Daily PR Reminder

on:
  schedule:
    # Production: Run at 9 AM and 2 PM UTC (adjust timezone as needed)
    - cron: '0 9 * * *'  # 9 AM UTC
    - cron: '0 14 * * *' # 2 PM UTC
    # Testing: every minute for feature/pr-label-management branch only
    - cron: '* * * * *'  # Every minute (test mode only)
  push:
    branches:
      - feature/pr-label-management
  workflow_dispatch: # Allow manual trigger for testing

jobs:
  remind-open-prs:
    runs-on: ubuntu-latest
    if: |
      github.repository_owner == 'adobecom' &&
      (github.event_name == 'workflow_dispatch' || 
       github.event_name == 'push' || 
       github.event_name == 'schedule')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find PRs needing review
        id: find-prs
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            console.log('üîç Finding open PRs with less than 2 approvals...');
            
            // Get all open PRs
            const openPRs = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              per_page: 100
            });
            
            console.log(`Found ${openPRs.data.length} open PRs`);
            
            const prsNeedingReview = [];
            
            for (const pr of openPRs.data) {
              // Skip draft PRs
              if (pr.draft) {
                console.log(`Skipping draft PR #${pr.number}`);
                continue;
              }
              
              // Get reviews for this PR
              const reviews = await github.rest.pulls.listReviews({
                owner,
                repo,
                pull_number: pr.number
              });
              
              let approvalCount = 0;
              let hasRequestChanges = false;
              
              for (const review of reviews.data) {
                if (review.state === 'APPROVED') {
                  approvalCount++;
                } else if (review.state === 'CHANGES_REQUESTED') {
                  hasRequestChanges = true;
                }
              }
              
              // If there are requested changes, reset approval count
              if (hasRequestChanges) {
                approvalCount = 0;
              }
              
              // Only include PRs with less than 2 approvals
              if (approvalCount < 2) {
                // Extract Jira ticket if present
                let jiraTicket = null;
                const titleMatch = pr.title.match(/(MWPW-\d+)/);
                if (titleMatch) {
                  jiraTicket = titleMatch[1];
                } else {
                  const bodyMatch = (pr.body || '').match(/(MWPW-\d+)/);
                  if (bodyMatch) {
                    jiraTicket = bodyMatch[1];
                  }
                }
                
                const displayTitle = jiraTicket ? `${jiraTicket}: ${pr.title.replace(`${jiraTicket}: `, '')}` : pr.title;
                const jiraLink = jiraTicket ? `\nüîó <https://jira.corp.adobe.com/browse/${jiraTicket}|${jiraTicket}>` : '';
                
                prsNeedingReview.push({
                  number: pr.number,
                  title: displayTitle,
                  author: pr.user.login,
                  url: pr.html_url,
                  approvalCount,
                  jiraTicket,
                  jiraLink,
                  createdAt: pr.created_at
                });
              }
            }
            
            console.log(`Found ${prsNeedingReview.length} PRs needing review`);
            
            // Set output for next step
            core.setOutput('prs', JSON.stringify(prsNeedingReview));
            core.setOutput('count', prsNeedingReview.length);

      - name: Send reminder notification
        if: steps.find-prs.outputs.count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const prs = JSON.parse('${{ steps.find-prs.outputs.prs }}');
            const count = parseInt('${{ steps.find-prs.outputs.count }}');
            
            console.log(`üì¢ Sending reminder for ${count} PRs needing review`);
            
            // Group PRs by approval count for better organization
            const prsByApproval = {
              0: prs.filter(pr => pr.approvalCount === 0),
              1: prs.filter(pr => pr.approvalCount === 1)
            };
            
            // Test mode: if this is the every-minute cron (testing only) OR if we're on the feature branch
            const isTestMode = (context.event_name === 'schedule' && context.schedule === '* * * * *') ||
                              context.ref === 'refs/heads/feature/pr-label-management';
            
            // Escape special characters for JSON
            const escapeJson = (str) => {
              return str
                .replace(/\\/g, '\\\\')
                .replace(/"/g, '\\"')
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/\t/g, '\\t');
            };
            
            let messageText = `‚ö° *SYSTEM ALERT*${isTestMode ? ' [TEST_MODE]' : ''} - Code Review Required\n\n`;
            messageText += `üîç *${count}* TARGET(S) DETECTED:\n\n`;
            
            // PRs with 0 approvals
            if (prsByApproval[0].length > 0) {
              messageText += `üö® *${prsByApproval[0].length} CRITICAL TARGET(S) - NO APPROVALS:*\n`;
              for (const pr of prsByApproval[0]) {
                messageText += `‚Ä¢ <${pr.url}|${escapeJson(pr.title)}> (#${pr.number}) by @${escapeJson(pr.author)}${pr.jiraLink}\n`;
              }
              messageText += `\n`;
            }
            
            // PRs with 1 approval
            if (prsByApproval[1].length > 0) {
              messageText += `‚ö†Ô∏è *${prsByApproval[1].length} TARGET(S) - PARTIAL APPROVAL:*\n`;
              for (const pr of prsByApproval[1]) {
                messageText += `‚Ä¢ <${pr.url}|${escapeJson(pr.title)}> (#${pr.number}) by @${escapeJson(pr.author)}${pr.jiraLink}\n`;
              }
              messageText += `\n`;
            }
            
            messageText += `üî• *ACTION REQUIRED: Review these targets to maintain system integrity!*`;
            
            const message = {
              text: messageText,
              attachments: [
                {
                  color: "#ff6b35",
                  footer: "Express Milo ‚Ä¢ Daily Reminder",
                  footer_icon: "https://github.com/adobecom/express-milo/raw/main/express/code/img/favicon.ico",
                  ts: Math.floor(Date.now() / 1000)
                }
              ]
            };
            
            // Send to Slack
            const webhookUrl = process.env.SLACK_WEBHOOK_URL;
            if (!webhookUrl) {
              console.log('‚ùå SLACK_WEBHOOK_URL not configured');
              return;
            }
            
            try {
              const response = await fetch(webhookUrl, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(message)
              });
              
              if (response.ok) {
                console.log('‚úÖ Daily reminder sent successfully');
              } else {
                console.log(`‚ùå Failed to send reminder: ${response.status} ${response.statusText}`);
              }
            } catch (error) {
              console.log(`‚ùå Error sending reminder: ${error.message}`);
            }
        env:
          SLACK_WEBHOOK_URL: ${{ github.ref == 'refs/heads/feature/pr-label-management' && secrets.SLACK_WEBHOOK_URL_PR_TEST || secrets.SLACK_WEBHOOK_URL_PR }}

      - name: No PRs reminder
        if: steps.find-prs.outputs.count == '0'
        run: |
          echo "‚úÖ No PRs need review - skipping reminder"

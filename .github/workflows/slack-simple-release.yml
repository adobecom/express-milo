name: Simple Release Notification

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

env:
  # Primary webhook (required)
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  # Additional webhooks (optional)
  SLACK_WEBHOOK_URL_2: ${{ secrets.SLACK_WEBHOOK_URL_2 }}
  SLACK_WEBHOOK_URL_3: ${{ secrets.SLACK_WEBHOOK_URL_3 }}
  # Channel names for reference
  SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL || '#express-releases' }}
  SLACK_CHANNEL_2: ${{ secrets.SLACK_CHANNEL_2 || '#express-dev-core' }}
  SLACK_CHANNEL_3: ${{ secrets.SLACK_CHANNEL_3 || '#engineering-updates' }}

jobs:
  notify-release:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'adobecom' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract PR information
        id: extract-prs
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            console.log('üîç Fetching recent PRs with detailed information...');
            
            // Get recent commits
            const commits = await github.rest.repos.listCommits({
              owner,
              repo,
              sha: 'main',
              per_page: 10
            });
            
            const mergeCommits = commits.data.filter(commit => 
              commit.commit.message.includes('Merge pull request')
            );
            
            console.log(`Found ${mergeCommits.length} merge commits`);
            
            if (mergeCommits.length === 0) {
              return {
                prList: 'No recent PRs found'
              };
            }
            
            // Extract PR numbers from merge commits
            const prNumbers = mergeCommits.map(commit => {
              const match = commit.commit.message.match(/#(\d+)/);
              return match ? parseInt(match[1]) : null;
            }).filter(num => num !== null);
            
            console.log(`Extracted PR numbers: ${prNumbers.join(', ')}`);
            
            // Get detailed PR information
            const prDetails = [];
            for (const prNumber of prNumbers) {
              try {
                const pr = await github.rest.pulls.get({
                  owner,
                  repo,
                  pull_number: prNumber
                });
                
                const title = pr.data.title;
                const body = pr.data.body || '';
                
                // Look for ticket numbers in various formats
                let ticketNumber = null;
                let cleanTitle = title;
                
                // Check title first (MWPW-XXXXXX pattern)
                const titleMatch = title.match(/(MWPW-\d+)/);
                if (titleMatch) {
                  ticketNumber = titleMatch[1];
                  cleanTitle = title.replace(`${ticketNumber}: `, '');
                } else {
                  // Check PR body for ticket numbers
                  const bodyMatch = body.match(/(MWPW-\d+)/);
                  if (bodyMatch) {
                    ticketNumber = bodyMatch[1];
                  }
                  
                  // Also check for other ticket patterns in body
                  const otherTicketMatch = body.match(/([A-Z]+-\d+)/);
                  if (otherTicketMatch && !ticketNumber) {
                    ticketNumber = otherTicketMatch[1];
                  }
                }
                
                prDetails.push({
                  number: prNumber,
                  title: cleanTitle,
                  originalTitle: title,
                  body: body,
                  ticketNumber: ticketNumber,
                  url: pr.data.html_url
                });
                
                console.log(`PR #${prNumber}: "${cleanTitle}" ${ticketNumber ? `(Ticket: ${ticketNumber})` : '(No ticket found)'}`);
                
              } catch (error) {
                console.log(`Failed to get PR #${prNumber}: ${error.message}`);
              }
            }
            
            // Format the PR list
            let prList = '';
            prDetails.forEach(pr => {
              if (pr.ticketNumber) {
                // Show ticket number in title, link to Jira, show GitHub PR at end
                const displayTitle = `${pr.ticketNumber}: ${pr.title}`;
                prList += `- <https://jira.corp.adobe.com/browse/${pr.ticketNumber}|${displayTitle}> (#${pr.number})\n`;
              } else {
                // Link to GitHub PR
                prList += `- <https://github.com/${owner}/${repo}/pull/${pr.number}|${pr.title}> (#${pr.number})\n`;
              }
            });
            
            return {
              prList: prList
            };

      - name: Send release notification to primary channel
        if: env.SLACK_WEBHOOK_URL != '' && steps.extract-prs.outputs.prList != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: ${{ env.SLACK_CHANNEL }}
          webhook_url: ${{ env.SLACK_WEBHOOK_URL }}
          custom_payload: |
            {
              "text": "üöÄ *Express Milo Release Deployed*",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                      "short": true
                    }
                  ]
                },
                {
                  "color": "#36a64f",
                  "text": "## Changes in this Release\n${{ steps.extract-prs.outputs.prList }}",
                  "mrkdwn_in": ["text"]
                }
              ],
              "footer": "Express Milo",
              "footer_icon": "https://github.com/adobecom/express-milo/raw/main/express/code/img/favicon.ico"
            }

      - name: Send release notification to secondary channel
        if: env.SLACK_WEBHOOK_URL_2 != '' && steps.extract-prs.outputs.prList != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: ${{ env.SLACK_CHANNEL_2 }}
          webhook_url: ${{ env.SLACK_WEBHOOK_URL_2 }}
          custom_payload: |
            {
              "text": "üöÄ *Express Milo Release Deployed*",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                      "short": true
                    }
                  ]
                },
                {
                  "color": "#36a64f",
                  "text": "## Changes in this Release\n${{ steps.extract-prs.outputs.prList }}",
                  "mrkdwn_in": ["text"]
                }
              ],
              "footer": "Express Milo",
              "footer_icon": "https://github.com/adobecom/express-milo/raw/main/express/code/img/favicon.ico"
            }

      - name: Send release notification to tertiary channel
        if: env.SLACK_WEBHOOK_URL_3 != '' && steps.extract-prs.outputs.prList != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: ${{ env.SLACK_CHANNEL_3 }}
          webhook_url: ${{ env.SLACK_WEBHOOK_URL_3 }}
          custom_payload: |
            {
              "text": "üöÄ *Express Milo Release Deployed*",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                      "short": true
                    }
                  ]
                },
                {
                  "color": "#36a64f",
                  "text": "## Changes in this Release\n${{ steps.extract-prs.outputs.prList }}",
                  "mrkdwn_in": ["text"]
                }
              ],
              "footer": "Express Milo",
              "footer_icon": "https://github.com/adobecom/express-milo/raw/main/express/code/img/favicon.ico"
            }

      - name: Fallback notification
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        run: |
          echo "‚ùå Release notification failed"
          echo "Commit: ${{ github.sha }}"
          echo "Repository: ${{ github.repository }}"

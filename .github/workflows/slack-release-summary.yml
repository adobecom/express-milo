name: Slack Release Summary

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL || '#express-releases' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  generate-release-summary:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'adobecom' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get recent PRs
        id: get-prs
        run: |
          # Get the last 20 commits to find merged PRs
          COMMITS=$(git log --oneline -20 --grep="Merge pull request")
          
          # Extract PR numbers
          PR_NUMBERS=$(echo "$COMMITS" | grep -o '#[0-9]*' | sort -u | head -10)
          
          if [ -n "$PR_NUMBERS" ]; then
            echo "pr_numbers=${PR_NUMBERS}" >> $GITHUB_OUTPUT
            echo "Found PRs: ${PR_NUMBERS}"
          else
            echo "pr_numbers=" >> $GITHUB_OUTPUT
            echo "No PRs found in recent commits"
          fi

      - name: Fetch PR details from GitHub API
        if: steps.get-prs.outputs.pr_numbers != ''
        id: fetch-pr-details
        run: |
          PR_NUMBERS="${{ steps.get-prs.outputs.pr_numbers }}"
          RELEASE_NOTES="## Changes in this Release\n"
          
          for pr_num in $PR_NUMBERS; do
            # Remove # from PR number
            PR_NUM=${pr_num#\#}
            
            echo "Fetching details for PR #${PR_NUM}..."
            
            # Get PR details from GitHub API
            PR_RESPONSE=$(curl -s -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUM}")
            
            if [ $? -eq 0 ]; then
              PR_TITLE=$(echo "$PR_RESPONSE" | jq -r '.title // "Unknown Title"')
              PR_URL=$(echo "$PR_RESPONSE" | jq -r '.html_url // ""')
              
              if [ "$PR_TITLE" != "null" ] && [ "$PR_TITLE" != "Unknown Title" ]; then
                RELEASE_NOTES="${RELEASE_NOTES}- ${PR_TITLE} #${PR_NUM}\n"
                echo "Added: ${PR_TITLE} #${PR_NUM}"
              fi
            else
              echo "Failed to fetch PR #${PR_NUM}"
            fi
            
            # Small delay to avoid rate limiting
            sleep 0.5
          done
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send release summary to Slack
        if: env.SLACK_WEBHOOK_URL != '' && steps.fetch-pr-details.outputs.release_notes != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: ${{ env.SLACK_CHANNEL }}
          webhook_url: ${{ env.SLACK_WEBHOOK_URL }}
          custom_payload: |
            {
              "text": "üöÄ *Express Milo Release Deployed*",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                      "short": true
                    }
                  ]
                },
                {
                  "color": "#36a64f",
                  "text": "${{ steps.fetch-pr-details.outputs.release_notes }}",
                  "mrkdwn_in": ["text"]
                }
              ],
              "footer": "Express Milo",
              "footer_icon": "https://github.com/adobecom/express-milo/raw/main/express/code/img/favicon.ico"
            }

      - name: Fallback notification
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        run: |
          echo "‚ùå Release summary generation failed"
          echo "Commit: ${{ github.sha }}"
          echo "Repository: ${{ github.repository }}"

name: Accessibility Check

on:
  pull_request:
    types: [opened, edited, synchronize]
  workflow_dispatch:

jobs:
  a11y-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract PR body
        id: pr-body
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              ...context.repo,
              pull_number: context.issue.number
            });
            core.setOutput("body", pr.data.body || "");

      - name: Parse Test URLs only
        id: parse-urls
        run: |
          body="${{ steps.pr-body.outputs.body }}"
          urls=$(echo "$body" | awk '/## Test URLs/{flag=1;next}/##/{flag=0}flag' | grep -Eo 'https?://[^ )]+')
          urls=$(echo "$urls" | tr '\n' ' ')
          echo "URLS=$urls" >> $GITHUB_ENV
          echo "Parsed URLs: $urls"

      - name: Run Accessibility Scan
        id: a11y-scan
        run: |
          mkdir -p reports
          urls="${URLS:-}"
          skipped=""
          if [ -z "$urls" ]; then
            echo "NO_URLS=true" >> $GITHUB_ENV
            exit 0
          fi

          for url in $urls; do
            echo "🔎 Scanning $url"
            if ! npx @axe-core/cli --exit 0 --timeout 60000 -q -s -u "$url" -j > "reports/$(echo $url | sed 's/[^a-zA-Z0-9]/_/g').json"; then
              echo "⚠️ Skipping $url (unreachable or failed)"
              skipped="$skipped $url"
            fi
          done

          echo "SKIPPED=$skipped" >> $GITHUB_ENV

          if ls reports/*.json 1> /dev/null 2>&1; then
            echo "REPORTS=true" >> $GITHUB_ENV
          else
            echo "REPORTS=false" >> $GITHUB_ENV
          fi

      - name: Post or Update GitHub PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, issue } = context;
            const issue_number = issue.number;
            const urls = (process.env.URLS || "").trim();
            const noUrls = process.env.NO_URLS === "true";
            const hasReports = process.env.REPORTS === "true";
            const skipped = (process.env.SKIPPED || "").trim();

            let body = "🧪 **Accessibility Check**\n\n";

            if (noUrls) {
              body += "⚠️ Accessibility check could not run (no Test URLs section found).\n\n";
            } else if (!urls) {
              body += "⚠️ Accessibility check could not run (no URLs parsed).\n\n";
            } else {
              const urlList = urls.split(" ").filter(Boolean);
              for (const url of urlList) {
                if (skipped.includes(url)) {
                  body += `- ⚠️ Skipped [${url}](${url}) (unreachable or private)\n`;
                } else if (hasReports) {
                  body += `- ✅ No accessibility violations found at [${url}](${url})\n`;
                }
              }
              body += "\n";
            }

            // Always show rerun link
            body += "\n🔁 [Re-run Accessibility Check](${context.payload.repository.html_url}/actions/runs/${process.env.GITHUB_RUN_ID})\n";

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              ...repo,
              issue_number,
            });

            const existing = comments.data.find(c => c.user.type === "Bot" && c.body.includes("Accessibility Check"));

            if (existing) {
              await github.rest.issues.updateComment({
                ...repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                ...repo,
                issue_number,
                body,
              });
            }

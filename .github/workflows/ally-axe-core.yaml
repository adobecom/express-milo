name: Accessibility Check (axe-core)

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches:
      - stage

jobs:
  a11y:
    if: >
      github.event.pull_request.draft == false &&
      contains(join(toJson(github.event.pull_request.labels.*.name), ','), 'engineering')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm install playwright @axe-core/playwright jsdom prettier

      - name: Extract PR URLs
        id: urls
        run: |
          BEFORE_URL=$(echo "${{ github.event.pull_request.body }}" | grep -oP '(?<=\| \*\*Before\*\*  \| ).*' | xargs)
          AFTER_URL=$(echo "${{ github.event.pull_request.body }}" | grep -oP '(?<=\| \*\*After\*\*   \| ).*' | xargs)

          echo "before=$BEFORE_URL" >> $GITHUB_OUTPUT
          echo "after=$AFTER_URL" >> $GITHUB_OUTPUT

      - name: Run axe-core checks
        id: axe
        run: |
          node <<'EOF'
          const fs = require('fs');
          const { chromium } = require('playwright');
          const { AxeBuilder } = require('@axe-core/playwright');

          const urls = {
            before: process.env.BEFORE_URL,
            after: process.env.AFTER_URL
          };

          async function run(url, label) {
            if (!url) return null;
            const browser = await chromium.launch();
            const page = await browser.newPage();
            await page.goto(url, { waitUntil: 'domcontentloaded' });
            const results = await new AxeBuilder({ page }).analyze();
            await browser.close();

            fs.writeFileSync(`${label}-report.json`, JSON.stringify(results, null, 2));
            fs.writeFileSync(`${label}-report.html`, `
              <html><head><title>A11y Report: ${label}</title></head>
              <body><h1>Accessibility Report: ${label}</h1>
              <pre>${JSON.stringify(results, null, 2)}</pre></body></html>
            `);
            return results;
          }

          (async () => {
            const before = await run(urls.before, 'before');
            const after = await run(urls.after, 'after');

            const newViolations = [];
            if (after) {
              for (const v of after.violations) {
                const already = before?.violations.some(b => b.id === v.id);
                if (!already) newViolations.push(v);
              }
            }

            fs.writeFileSync('new-violations.json', JSON.stringify(newViolations, null, 2));

            // Fail job if new A-level violations found
            const blockers = newViolations.filter(v => v.impact === 'critical' || v.impact === 'serious');
            if (blockers.length > 0) {
              console.error("Blocking A-level violations found!");
              process.exit(1);
            }
          })();
          EOF
        env:
          BEFORE_URL: ${{ steps.urls.outputs.before }}
          AFTER_URL: ${{ steps.urls.outputs.after }}

      - name: Upload reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: a11y-reports
          path: |
            before-report.json
            before-report.html
            after-report.json
            after-report.html
            new-violations.json

      - name: Post PR comment with results
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let msg = "## üß™ Accessibility Check\n\n";

            try {
              const newViolations = JSON.parse(fs.readFileSync('new-violations.json', 'utf8'));
              if (newViolations.length === 0) {
                msg += "‚úÖ No new accessibility issues introduced.";
              } else {
                msg += "‚ö†Ô∏è New accessibility issues detected:\n\n";
                for (const v of newViolations) {
                  msg += `- **${v.id}** (${v.impact})\n  - ${v.description}\n  - Help: ${v.helpUrl}\n`;
                }
                msg += "\nDetailed HTML reports available in workflow artifacts.";
              }
            } catch (e) {
              msg += "‚ö†Ô∏è Accessibility check could not run (no URLs found or parsing failed).";
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: msg
            });

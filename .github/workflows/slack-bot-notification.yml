name: Slack Bot Release Notification

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

env:
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL || '#express-releases' }}

jobs:
  notify-release:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'adobecom' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract PR information
        id: extract-prs
        run: |
          # Get recent merge commits
          MERGE_COMMITS=$(git log --oneline -10 --grep="Merge pull request")
          
          if [ -n "$MERGE_COMMITS" ]; then
            # Extract PR titles and numbers
            PR_LIST=""
            while IFS= read -r line; do
              if echo "$line" | grep -q "Merge pull request"; then
                # Extract PR number
                PR_NUM=$(echo "$line" | grep -o '#[0-9]*')
                
                # Extract PR title (everything after "Merge pull request #XXX: ")
                PR_TITLE=$(echo "$line" | sed 's/.*Merge pull request #[0-9]*: //' | sed 's/ from.*//')
                
                if [ -n "$PR_NUM" ] && [ -n "$PR_TITLE" ]; then
                  PR_LIST="${PR_LIST}- ${PR_TITLE} ${PR_NUM}\n"
                fi
              fi
            done <<< "$MERGE_COMMITS"
            
            echo "pr_list<<EOF" >> $GITHUB_OUTPUT
            echo -e "$PR_LIST" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "pr_list=No recent PRs found" >> $GITHUB_OUTPUT
          fi

      - name: Send notification to Slack
        if: env.SLACK_BOT_TOKEN != '' && steps.extract-prs.outputs.pr_list != ''
        run: |
          # Prepare the message
          MESSAGE="üöÄ *Express Milo Release Deployed*"
          
          # Create the blocks for rich formatting
          BLOCKS=$(cat <<EOF
          [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "üöÄ Express Milo Release Deployed"
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*Repository:*\n${{ github.repository }}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Branch:*\n${{ github.ref_name }}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Commit:*\n<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                }
              ]
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Changes in this Release*\n${{ steps.extract-prs.outputs.pr_list }}"
              }
            }
          ]
          EOF
          )
          
          # Send to Slack
          curl -X POST \
            -H "Authorization: Bearer ${{ env.SLACK_BOT_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"channel\":\"${{ env.SLACK_CHANNEL }}\",\"blocks\":${BLOCKS}}" \
            https://slack.com/api/chat.postMessage

      - name: Fallback notification
        if: failure() && env.SLACK_BOT_TOKEN != ''
        run: |
          echo "‚ùå Release notification failed"
          echo "Commit: ${{ github.sha }}"
          echo "Repository: ${{ github.repository }}"

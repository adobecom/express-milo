name: PR Ready for Review Notification

on:
  pull_request:
    types: [labeled]
  push:
    branches:
      - feature/pr-label-management
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to test notification'
        required: false
        type: string

jobs:
  notify-ready-for-review:
    runs-on: ubuntu-latest
    if: |
      github.event.label.name == 'Ready for Review' &&
      github.repository_owner == 'adobecom'
    
    steps:
      - name: Send Ready for Review notification
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const pr = context.payload.pull_request;
            
            console.log(`PR #${number} labeled as Ready for Review - sending notification`);
            
            // Get PR details
            const prDetails = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });
            
            const title = prDetails.data.title;
            const author = prDetails.data.user.login;
            const url = prDetails.data.html_url;
            const branch = prDetails.data.head.ref;
            const baseBranch = prDetails.data.base.ref;
            
            // Extract Jira ticket if present
            let jiraTicket = null;
            const titleMatch = title.match(/(MWPW-\d+)/);
            if (titleMatch) {
              jiraTicket = titleMatch[1];
            } else {
              // Check PR body for ticket
              const bodyMatch = (prDetails.data.body || '').match(/(MWPW-\d+)/);
              if (bodyMatch) {
                jiraTicket = bodyMatch[1];
              }
            }
            
            // Format the message
            const displayTitle = jiraTicket ? `${jiraTicket}: ${title.replace(`${jiraTicket}: `, '')}` : title;
            const jiraLink = jiraTicket ? `\nüîó <https://jira.corp.adobe.com/browse/${jiraTicket}|${jiraTicket}>` : '';
            
            const isTestMode = pr.base.ref !== 'main';
            const message = {
              text: `üîç *New PR Ready for Review*${isTestMode ? ' (TEST MODE)' : ''}`,
              attachments: [
                {
                  color: "#0066cc",
                  fields: [
                    {
                      title: "üìù PR Title",
                      value: displayTitle,
                      short: false
                    },
                    {
                      title: "üë§ Author",
                      value: author,
                      short: true
                    },
                    {
                      title: "üåø Branch",
                      value: `\`${branch}\` ‚Üí \`${baseBranch}\``,
                      short: true
                    },
                    {
                      title: "üîó Links",
                      value: `<${url}|PR #${number}>${jiraLink}`,
                      short: false
                    }
                  ],
                  footer: "Express Milo ‚Ä¢ Ready for Review",
                  footer_icon: "https://github.com/adobecom/express-milo/raw/main/express/code/img/favicon.ico"
                }
              ]
            };
            
            // Send to Slack
            const webhookUrl = process.env.SLACK_WEBHOOK_URL;
            if (!webhookUrl) {
              console.log('‚ùå SLACK_WEBHOOK_URL not configured');
              return;
            }
            
            try {
              const response = await fetch(webhookUrl, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(message)
              });
              
              if (response.ok) {
                console.log('‚úÖ Ready for Review notification sent successfully');
              } else {
                console.log(`‚ùå Failed to send notification: ${response.status} ${response.statusText}`);
              }
            } catch (error) {
              console.log(`‚ùå Error sending notification: ${error.message}`);
            }
        env:
          SLACK_WEBHOOK_URL: ${{ github.event.pull_request.base.ref == 'main' && secrets.SLACK_WEBHOOK_URL_PR || secrets.SLACK_WEBHOOK_URL_PR_TEST }}

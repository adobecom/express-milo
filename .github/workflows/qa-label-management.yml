name: QA Label Management

on:
  pull_request:
    types: [opened, edited, ready_for_review, converted_to_draft, labeled, unlabeled, synchronize, reopened]

jobs:
  manage-labels:
    name: Manage All PR Labels
    runs-on: ubuntu-latest
    steps:
      - name: Manage labels based on PR state and approvals
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            console.log(`Workflow triggered for PR #${number}, action: ${context.payload.action}`);
            
            // Get PR details with error handling
            let pr;
            try {
              pr = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: number
              });
              console.log(`Successfully retrieved PR #${number} details`);
            } catch (error) {
              console.log(`❌ Failed to get PR details: ${error.message}`);
              if (error.status === 404) {
                console.log(`PR #${number} not found - may have been deleted`);
              } else if (error.status === 403) {
                console.log(`Insufficient permissions to access PR #${number}`);
              }
              return; // Exit gracefully
            }
            
            const currentLabels = pr.data.labels.map(label => label.name);
            const isDraft = pr.data.draft;
            const isTestMode = currentLabels.includes('test-qa-workflow');
            
            console.log(`Current labels on PR #${number}:`, currentLabels);
            console.log(`Is draft: ${isDraft}, Is test mode: ${isTestMode}`);
            
            // Start fresh - only keep non-Ready labels
            const targetLabels = currentLabels.filter(label => 
              !['Ready for Review', 'Ready for review', 'Ready for QA', 'Ready for qa'].includes(label)
            );
            
            // Add the correct Ready label based on state
            if (isDraft) {
              // Draft PRs should have no Ready labels
              console.log(`Draft PR - no Ready labels needed`);
            } else if (isTestMode || (await checkApprovals(owner, repo, number)) >= 2) {
              // Ready for QA - 2+ approvals and no request changes
              targetLabels.push('Ready for QA');
              console.log(`Adding Ready for QA label`);
            } else {
              // Ready for Review - default for non-draft PRs
              targetLabels.push('Ready for Review');
              console.log(`Adding Ready for Review label`);
            }
            
            // Check if labels actually changed to avoid unnecessary operations
            const currentReadyLabels = currentLabels.filter(label => 
              label.includes('Ready for')
            );
            const targetReadyLabels = targetLabels.filter(label => 
              label.includes('Ready for')
            );
            
            // More efficient label comparison
            const labelsChanged = currentReadyLabels.length !== targetReadyLabels.length || 
              !currentReadyLabels.every(label => targetReadyLabels.includes(label));
            
            if (labelsChanged) {
              console.log(`Labels changed: ${currentReadyLabels.join(', ')} → ${targetReadyLabels.join(', ')}`);
              
              // Set the exact label list with error handling
              try {
                await github.rest.issues.setLabels({
                  owner,
                  repo,
                  issue_number: number,
                  labels: targetLabels
                });
                console.log(`✅ Successfully set labels to: ${targetLabels.join(', ')}`);
              } catch (error) {
                console.log(`❌ Failed to set labels: ${error.message}`);
                if (error.status === 404) {
                  console.log(`PR #${number} not found - may have been deleted`);
                } else if (error.status === 403) {
                  console.log(`Insufficient permissions to modify labels on PR #${number}`);
                } else if (error.status === 422) {
                  console.log(`Invalid label data provided: ${JSON.stringify(targetLabels)}`);
                }
                return; // Exit gracefully
              }
            } else {
              console.log(`No label changes needed - Ready labels already correct`);
            }
            
            // Helper function to check approvals with error handling
            async function checkApprovals(owner, repo, number) {
              try {
                const reviews = await github.rest.pulls.listReviews({
                  owner,
                  repo,
                  pull_number: number
                });
                
                let approvalCount = 0;
                for (const review of reviews.data) {
                  if (review.state === 'APPROVED') {
                    approvalCount++;
                  } else if (review.state === 'CHANGES_REQUESTED') {
                    console.log(`Found "request changes" review - blocking QA transition`);
                    return 0; // Request changes blocks QA
                  }
                }
                console.log(`Found ${approvalCount} approval(s) for PR #${number}`);
                return approvalCount;
              } catch (error) {
                console.log(`❌ Failed to get reviews for PR #${number}: ${error.message}`);
                if (error.status === 404) {
                  console.log(`PR #${number} not found when checking reviews`);
                } else if (error.status === 403) {
                  console.log(`Insufficient permissions to read reviews for PR #${number}`);
                }
                // Return 0 to default to "Ready for Review" on error
                return 0;
              }
            }

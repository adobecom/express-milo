import { E as a } from "./index-Dj6VB_pE.min.js";
const n = {
  LOG_UPLOAD_START: "LOG_UPLOAD_START",
  LOG_UPLOAD_RESPONSE: "LOG_UPLOAD_RESPONSE",
  LOG_UPLOAD_STATUS: "LOG_UPLOAD_STATUS",
  LOG_UPLOAD_ERROR: "LOG_UPLOAD_ERROR"
};
class s {
  constructor() {
    this.isInitialized = !1, this.markers = n;
  }
  /**
   * Initialize the markers (for consistency with other classes)
   */
  initialize() {
    this.isInitialized || (this.isInitialized = !0);
  }
  /**
   * Get all available markers
   */
  getMarkers() {
    if (!this.isInitialized)
      throw new Error("LogMarkers must be initialized before use");
    return this.markers;
  }
  /**
   * Get a specific marker
   */
  getMarker(i) {
    if (!this.isInitialized)
      throw new Error("LogMarkers must be initialized before use");
    return this.markers[i];
  }
  /**
   * Check if a string is a valid marker
   */
  isValidMarker(i) {
    return Object.values(this.markers).includes(i);
  }
}
class g {
  constructor() {
    this.enhancedLoggingInstance = null, this.isInitialized = !1, this.isLoggingEnabled = !1, this.environment = null, this.logMarkers = new s(), this.logMarkers.initialize();
  }
  /**
   * Initialize the logging service
   * Dynamically imports EnhancedLogging if environment is local
   * @param environment - The current environment ('local', 'stage', 'prod')
   */
  async initialize(i) {
    if (!this.isInitialized) {
      if (this.environment = i, this.isLoggingEnabled = this.shouldEnableLogging(i), this.isLoggingEnabled)
        try {
          await this.loadEnhancedLogging();
        } catch (e) {
          console.warn("Failed to load EnhancedLogging module:", e), this.isLoggingEnabled = !1;
        }
      this.isInitialized = !0;
    }
  }
  /**
   * Check if logging should be enabled for the environment
   */
  shouldEnableLogging(i) {
    return i === a.LOCAL;
  }
  /**
   * Load the EnhancedLogging module dynamically
   */
  async loadEnhancedLogging() {
    const i = await import("./EnhancedLogging-ycbPCFZ4.min.js");
    this.enhancedLoggingInstance = new i.EnhancedLogging();
  }
  /**
   * Get the markers instance
   */
  getMarkers() {
    if (!this.isInitialized)
      throw new Error("LogService must be initialized before accessing markers");
    return this.logMarkers;
  }
  /**
   * Single public function for all logging operations
   * @param marker - The logging marker indicating the type of log
   * @param args - Arguments specific to the logging operation
   */
  log(i, ...e) {
    if (!this.isInitialized) {
      console.warn("LogService not initialized - call initialize() first");
      return;
    }
    if (!(!this.isLoggingEnabled || !this.enhancedLoggingInstance)) {
      if (!this.logMarkers.isValidMarker(i)) {
        console.warn(`Unknown logging marker: ${i}`);
        return;
      }
      this.executeLogging(i, ...e);
    }
  }
  /**
   * Execute the appropriate logging method based on marker
   */
  executeLogging(i, ...e) {
    switch (i) {
      case n.LOG_UPLOAD_START:
        this.enhancedLoggingInstance.logUploadStart(...e);
        break;
      case n.LOG_UPLOAD_RESPONSE:
        this.enhancedLoggingInstance.logUploadResponse(...e);
        break;
      case n.LOG_UPLOAD_STATUS:
        this.enhancedLoggingInstance.handleUploadStatusCode(...e);
        break;
      case n.LOG_UPLOAD_ERROR:
        this.enhancedLoggingInstance.logUploadError(...e);
        break;
    }
  }
  /**
   * Check if logging is enabled for the current environment
   */
  isEnabled() {
    return this.isLoggingEnabled;
  }
  /**
   * Get current environment
   */
  getEnvironment() {
    return this.environment;
  }
  /**
   * Check if the service is initialized
   */
  getIsInitialized() {
    return this.isInitialized;
  }
  /**
   * Reset the service state (useful for testing)
   */
  reset() {
    this.enhancedLoggingInstance = null, this.isInitialized = !1, this.isLoggingEnabled = !1, this.environment = null, this.logMarkers = new s(), this.logMarkers.initialize();
  }
}
export {
  s as LogMarkers,
  g as LogService
};
//# sourceMappingURL=Logging-CoIJWvXW.min.js.map

{"version":3,"file":"EnhancedLogging-ycbPCFZ4.min.js","sources":["../src/upload-service/EnhancedLogging.ts"],"sourcesContent":["import type { AdobeAsset } from '@dcx/common-types';\nimport type { RepoResponseResult } from '@dcx/assets';\n\nconst OPERATION_TYPE = {\n  GUEST: 'guest',\n  USER: 'user'\n} as const;\n\ntype OperationType = typeof OPERATION_TYPE[keyof typeof OPERATION_TYPE];\n\nconst MESSAGES = {\n  GUEST_START: 'Creating asset for guest user',\n  USER_START: 'Creating asset for authenticated user',\n  GUEST_ERROR: 'Error creating asset for guest',\n  USER_ERROR: 'Error creating asset for authenticated user',\n  UPLOAD_SUCCESSFUL: 'Upload successful',\n  UPLOAD_REDIRECT: 'Upload redirect',\n  UPLOAD_FAILED: 'Upload failed',\n  UNKNOWN_STATUS: 'Unknown status code'\n} as const;\n\nconst STATUS_MESSAGES = {\n  200: { icon: '✅', message: 'Upload successful' },\n  201: { icon: '✅', message: 'Upload successful' },\n  202: { icon: '✅', message: 'Upload accepted - processing asynchronously' },\n  400: { icon: '❌', message: 'Bad Request' },\n  401: { icon: '❌', message: 'Unauthorized' },\n  403: { icon: '❌', message: 'Forbidden' },\n  404: { icon: '❌', message: 'Not Found' },\n  409: { icon: '⚠️', message: 'Conflict' },\n  412: { icon: '⚠️', message: 'Precondition Failed' },\n  413: { icon: '❌', message: 'Payload Too Large' },\n  429: { icon: '❌', message: 'Rate Limited' },\n  500: { icon: '❌', message: 'Internal Server Error' },\n  502: { icon: '❌', message: 'Bad Gateway' },\n  503: { icon: '❌', message: 'Service Unavailable' },\n  504: { icon: '❌', message: 'Gateway Timeout' }\n} as const;\n\nconst DEFAULT_ERROR_MESSAGES = {\n  401: 'Invalid or expired authentication token',\n  403: 'Insufficient permissions or resource access denied',\n  404: 'Repository, directory, or resource not found',\n  409: 'Asset already exists or version conflict',\n  412: 'Version mismatch or etag validation failed',\n  413: 'File size exceeds maximum allowed limit',\n  429: 'Too many requests - rate limit exceeded',\n  500: 'Server encountered an internal error',\n  502: 'Server acting as gateway received invalid response',\n  503: 'Service temporarily unavailable',\n  504: 'Gateway timeout while waiting for response'\n} as const;\n\n/**\n * Enhanced logging utilities for upload operations\n * Provides detailed logging and status code handling for upload responses\n */\nexport class EnhancedLogging {\n  private log: Console;\n\n  constructor() {\n    this.log = console;\n  }\n\n  /**\n   * Get operation display name\n   */\n  private getOperationName(operation: OperationType, isError = false): string {\n    if (isError) {\n      return operation === OPERATION_TYPE.GUEST ? MESSAGES.GUEST_ERROR : MESSAGES.USER_ERROR;\n    }\n    return operation === OPERATION_TYPE.GUEST ? MESSAGES.GUEST_START : MESSAGES.USER_START;\n  }\n\n  /**\n   * Extract response headers for logging\n   */\n  private extractResponseHeaders(headers: Record<string, string> = {}): {\n    contentLength: string;\n    retryAfter: string | null;\n    rateLimitRemaining: string | null;\n    rateLimitReset: string | null;\n  } {\n    return {\n      contentLength: headers['content-length'] || 'unknown',\n      retryAfter: headers['retry-after'] || null,\n      rateLimitRemaining: headers['x-ratelimit-remaining'] || null,\n      rateLimitReset: headers['x-ratelimit-reset'] || null\n    };\n  }\n\n  /**\n   * Create log data for upload response\n   */\n  private createUploadResponseLogData(\n    operation: string,\n    result: RepoResponseResult<AdobeAsset>,\n    fullPath: string,\n    fileSize: number\n  ) {\n    const { response } = result;\n    const headers = this.extractResponseHeaders(response.headers);\n    \n    return {\n      operation,\n      fullPath,\n      fileSize,\n      statusCode: response.statusCode,\n      statusMessage: response.message,\n      responseCode: response.code,\n      hasAsset: !!result.result,\n      assetId: result.result?.assetId,\n      assetName: result.result?.name,\n      ...headers\n    };\n  }\n\n  /**\n   * Log based on response status code range\n   */\n  private logByStatusRange(statusCode: number, logData: any): void {\n    if (statusCode >= 200 && statusCode < 300) {\n      this.log.log(MESSAGES.UPLOAD_SUCCESSFUL, logData);\n    } else if (statusCode >= 300 && statusCode < 400) {\n      this.log.log(MESSAGES.UPLOAD_REDIRECT, logData);\n    } else {\n      this.log.log(MESSAGES.UPLOAD_FAILED, logData);\n    }\n  }\n\n  /**\n   * Create status log message with icon and user type\n   */\n  private createStatusLogMessage(statusCode: number, authType: OperationType): string {\n    const statusInfo = STATUS_MESSAGES[statusCode as keyof typeof STATUS_MESSAGES];\n    if (statusInfo) {\n      return `${statusInfo.icon} ${statusInfo.message} (${statusCode}) for ${authType} user`;\n    }\n    return `ℹ️ ${MESSAGES.UNKNOWN_STATUS} (${statusCode}) for ${authType} user`;\n  }\n\n  /**\n   * Handle success status codes (200-299)\n   */\n  private handleSuccessStatus(statusCode: number, authType: OperationType): void {\n    const message = this.createStatusLogMessage(statusCode, authType);\n    this.log.log(message);\n  }\n\n  /**\n   * Handle client error status codes (400-499)\n   */\n  private handleClientErrorStatus(\n    statusCode: number,\n    response: any,\n    authType: OperationType\n  ): void {\n    const message = this.createStatusLogMessage(statusCode, authType);\n    const errorMessage = response.message || DEFAULT_ERROR_MESSAGES[statusCode as keyof typeof DEFAULT_ERROR_MESSAGES];\n    \n    const logData = {\n      message: errorMessage,\n      code: response.code,\n      authType\n    };\n\n    // Add specific headers for certain error types\n    if (statusCode === 413) {\n      (logData as any).maxSize = response.headers?.['x-max-upload-size'] || 'unknown';\n    } else if (statusCode === 429) {\n      (logData as any).retryAfter = response.headers?.['retry-after'] || 'unknown';\n      (logData as any).rateLimitReset = response.headers?.['x-ratelimit-reset'] || 'unknown';\n      (logData as any).rateLimitRemaining = response.headers?.['x-ratelimit-remaining'] || '0';\n    } else if (statusCode === 503) {\n      (logData as any).retryAfter = response.headers?.['retry-after'] || 'unknown';\n    }\n\n    if (statusCode === 409 || statusCode === 412) {\n      this.log.log(message, logData);\n    } else {\n      this.log.log(message, logData);\n    }\n  }\n\n  /**\n   * Handle server error status codes (500-599)\n   */\n  private handleServerErrorStatus(\n    statusCode: number,\n    response: any,\n    authType: OperationType\n  ): void {\n    const message = this.createStatusLogMessage(statusCode, authType);\n    const errorMessage = response.message || DEFAULT_ERROR_MESSAGES[statusCode as keyof typeof DEFAULT_ERROR_MESSAGES];\n    \n    const logData = {\n      message: errorMessage,\n      authType\n    };\n\n    if (statusCode === 503) {\n      (logData as any).retryAfter = response.headers?.['retry-after'] || 'unknown';\n    }\n\n    this.log.log(message, logData);\n  }\n\n  /**\n   * Format error object for logging\n   */\n  private formatError(error: any) {\n    if (error instanceof Error) {\n      return {\n        message: error.message,\n        name: error.name,\n        code: (error as any).code,\n        statusCode: (error as any).response?.statusCode\n      };\n    }\n    return error;\n  }\n\n  /**\n   * Log detailed upload response information\n   */\n  logUploadResponse(\n    operation: string,\n    result: RepoResponseResult<AdobeAsset>,\n    fullPath: string,\n    fileSize: number\n  ): void {\n    const logData = this.createUploadResponseLogData(operation, result, fullPath, fileSize);\n    this.logByStatusRange(result.response.statusCode, logData);\n  }\n\n  /**\n   * Handle specific status codes with appropriate logging and actions\n   */\n  handleUploadStatusCode(\n    statusCode: number,\n    response: any,\n    authType: OperationType\n  ): void {\n    if (statusCode >= 200 && statusCode < 300) {\n      this.handleSuccessStatus(statusCode, authType);\n    } else if (statusCode >= 400 && statusCode < 500) {\n      this.handleClientErrorStatus(statusCode, response, authType);\n    } else if (statusCode >= 500) {\n      this.handleServerErrorStatus(statusCode, response, authType);\n    } else {\n      // Handle other status codes (3xx, etc.)\n      const message = this.createStatusLogMessage(statusCode, authType);\n      this.log.log(message, { message: response.message, authType });\n    }\n  }\n\n  /**\n   * Log upload operation start with context\n   */\n  logUploadStart(operation: OperationType, context: {\n    fullPath: string;\n    contentType: string;\n    fileSize: number;\n    [key: string]: any;\n  }): void {\n    const operationName = this.getOperationName(operation);\n    this.log.log(`${operationName}:`, context);\n  }\n\n  /**\n   * Log upload operation error with detailed context\n   */\n  logUploadError(operation: OperationType, context: {\n    fullPath: string;\n    contentType: string;\n    fileSize: number;\n    [key: string]: any;\n  }, error: any): void {\n    const operationName = this.getOperationName(operation, true);\n    \n    this.log.log(`${operationName}:`, {\n      ...context,\n      error: this.formatError(error)\n    });\n  }\n}\n"],"names":["OPERATION_TYPE","MESSAGES","STATUS_MESSAGES","DEFAULT_ERROR_MESSAGES","EnhancedLogging","operation","isError","headers","result","fullPath","fileSize","_a","_b","response","statusCode","logData","authType","statusInfo","message","_c","_d","_e","error","context","operationName"],"mappings":"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"}
{"version":3,"file":"Logging-CcSaImGO.min.js","sources":["../src/upload-service/Logging.ts"],"sourcesContent":["import { ENVIRONMENT_TYPES, type EnvironmentType } from '../types';\n\nconst MARKER_TYPES = {\n  LOG_UPLOAD_START: 'LOG_UPLOAD_START',\n  LOG_UPLOAD_RESPONSE: 'LOG_UPLOAD_RESPONSE',\n  LOG_UPLOAD_STATUS: 'LOG_UPLOAD_STATUS',\n  LOG_UPLOAD_ERROR: 'LOG_UPLOAD_ERROR'\n} as const;\n\ntype MarkerType = typeof MARKER_TYPES[keyof typeof MARKER_TYPES];\n\n\n/**\n * Logging markers for different types of upload operations\n */\nexport class LogMarkers {\n  private markers: typeof MARKER_TYPES;\n  private isInitialized = false;\n\n  constructor() {\n    this.markers = MARKER_TYPES;\n  }\n\n  /**\n   * Initialize the markers (for consistency with other classes)\n   */\n  initialize(): void {\n    if (this.isInitialized) return;\n    this.isInitialized = true;\n  }\n\n  /**\n   * Get all available markers\n   */\n  getMarkers(): typeof MARKER_TYPES {\n    if (!this.isInitialized) {\n      throw new Error('LogMarkers must be initialized before use');\n    }\n    return this.markers;\n  }\n\n  /**\n   * Get a specific marker\n   */\n  getMarker(markerName: keyof typeof MARKER_TYPES): MarkerType {\n    if (!this.isInitialized) {\n      throw new Error('LogMarkers must be initialized before use');\n    }\n    return this.markers[markerName];\n  }\n\n  /**\n   * Check if a string is a valid marker\n   */\n  isValidMarker(marker: string): marker is MarkerType {\n    return Object.values(this.markers).includes(marker as MarkerType);\n  }\n}\n\n/**\n * Logging facade that conditionally loads and uses EnhancedLogging\n * Only loads the logging module and performs logging in local environments\n * Instance-based class that requires initialization\n */\nexport class LogService {\n  private enhancedLoggingInstance: any = null;\n  private logMarkers: LogMarkers;\n  private isInitialized = false;\n  private isLoggingEnabled = false;\n  private environment: EnvironmentType | null = null;\n\n  constructor() {\n    this.logMarkers = new LogMarkers();\n    this.logMarkers.initialize();\n  }\n\n  /**\n   * Initialize the logging facade\n   * Dynamically imports EnhancedLogging if environment is local\n   * @param environment - The current environment ('local', 'stage', 'prod')\n   */\n  async initialize(environment: EnvironmentType): Promise<void> {\n    if (this.isInitialized) return;\n\n    this.environment = environment;\n    this.isLoggingEnabled = this.shouldEnableLogging(environment);\n    \n    if (this.isLoggingEnabled) {\n      try {\n        await this.loadEnhancedLogging();\n      } catch (error) {\n        console.warn('Failed to load EnhancedLogging module:', error);\n        this.isLoggingEnabled = false;\n      }\n    }\n    \n    this.isInitialized = true;\n  }\n\n  /**\n   * Check if logging should be enabled for the environment\n   */\n  private shouldEnableLogging(environment: EnvironmentType): boolean {\n    return environment === ENVIRONMENT_TYPES.LOCAL;\n  }\n\n  /**\n   * Load the EnhancedLogging module dynamically\n   */\n  private async loadEnhancedLogging(): Promise<void> {\n    const module = await import('./EnhancedLogging');\n    this.enhancedLoggingInstance = new module.EnhancedLogging();\n  }\n\n  /**\n   * Get the markers instance\n   */\n  getMarkers(): LogMarkers {\n    if (!this.isInitialized) {\n      throw new Error('LoggingFacade must be initialized before accessing markers');\n    }\n    return this.logMarkers;\n  }\n\n  /**\n   * Single public function for all logging operations\n   * @param marker - The logging marker indicating the type of log\n   * @param args - Arguments specific to the logging operation\n   */\n  log(marker: string, ...args: any[]): void {\n    if (!this.isInitialized) {\n      console.warn('LoggingFacade not initialized - call initialize() first');\n      return;\n    }\n\n    if (!this.isLoggingEnabled || !this.enhancedLoggingInstance) return;\n\n    if (!this.logMarkers.isValidMarker(marker)) {\n      console.warn(`Unknown logging marker: ${marker}`);\n      return;\n    }\n\n    this.executeLogging(marker as MarkerType, ...args);\n  }\n\n  /**\n   * Execute the appropriate logging method based on marker\n   */\n  private executeLogging(marker: MarkerType, ...args: any[]): void {\n    switch (marker) {\n      case MARKER_TYPES.LOG_UPLOAD_START:\n        this.enhancedLoggingInstance.logUploadStart(...args);\n        break;\n      case MARKER_TYPES.LOG_UPLOAD_RESPONSE:\n        this.enhancedLoggingInstance.logUploadResponse(...args);\n        break;\n      case MARKER_TYPES.LOG_UPLOAD_STATUS:\n        this.enhancedLoggingInstance.handleUploadStatusCode(...args);\n        break;\n      case MARKER_TYPES.LOG_UPLOAD_ERROR:\n        this.enhancedLoggingInstance.logUploadError(...args);\n        break;\n    }\n  }\n\n  /**\n   * Check if logging is enabled for the current environment\n   */\n  isEnabled(): boolean {\n    return this.isLoggingEnabled;\n  }\n\n  /**\n   * Get current environment\n   */\n  getEnvironment(): EnvironmentType | null {\n    return this.environment;\n  }\n\n  /**\n   * Check if the facade is initialized\n   */\n  getIsInitialized(): boolean {\n    return this.isInitialized;\n  }\n\n  /**\n   * Reset the facade state (useful for testing)\n   */\n  reset(): void {\n    this.enhancedLoggingInstance = null;\n    this.isInitialized = false;\n    this.isLoggingEnabled = false;\n    this.environment = null;\n    this.logMarkers = new LogMarkers();\n    this.logMarkers.initialize();\n  }\n}\n"],"names":["MARKER_TYPES","LogMarkers","markerName","marker","LogService","environment","error","ENVIRONMENT_TYPES","module","args"],"mappings":";AAEA,MAAMA,IAAe;AAAA,EACnB,kBAAkB;AAAA,EAClB,qBAAqB;AAAA,EACrB,mBAAmB;AAAA,EACnB,kBAAkB;AACpB;AAQO,MAAMC,EAAW;AAAA,EAItB,cAAc;AAFd,SAAQ,gBAAgB,IAGtB,KAAK,UAAUD;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMjB,aAAmB;AACjB,IAAI,KAAK,kBACT,KAAK,gBAAgB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMvB,aAAkC;AAChC,QAAI,CAAC,KAAK;AACR,YAAM,IAAI,MAAM,2CAA2C;AAE7D,WAAO,KAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMd,UAAUE,GAAmD;AAC3D,QAAI,CAAC,KAAK;AACR,YAAM,IAAI,MAAM,2CAA2C;AAE7D,WAAO,KAAK,QAAQA,CAAU;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMhC,cAAcC,GAAsC;AAClD,WAAO,OAAO,OAAO,KAAK,OAAO,EAAE,SAASA,CAAoB;AAAA,EAAA;AAEpE;AAOO,MAAMC,EAAW;AAAA,EAOtB,cAAc;AANd,SAAQ,0BAA+B,MAEvC,KAAQ,gBAAgB,IACxB,KAAQ,mBAAmB,IAC3B,KAAQ,cAAsC,MAG5C,KAAK,aAAa,IAAIH,EAAA,GACtB,KAAK,WAAW,WAAA;AAAA,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ7B,MAAM,WAAWI,GAA6C;AAC5D,QAAI,MAAK,eAKT;AAAA,UAHA,KAAK,cAAcA,GACnB,KAAK,mBAAmB,KAAK,oBAAoBA,CAAW,GAExD,KAAK;AACP,YAAI;AACF,gBAAM,KAAK,oBAAA;AAAA,QAAoB,SACxBC,GAAO;AACd,kBAAQ,KAAK,0CAA0CA,CAAK,GAC5D,KAAK,mBAAmB;AAAA,QAAA;AAI5B,WAAK,gBAAgB;AAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMf,oBAAoBD,GAAuC;AACjE,WAAOA,MAAgBE,EAAkB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3C,MAAc,sBAAqC;AACjD,UAAMC,IAAS,MAAM,OAAO,mCAAmB;AAC/C,SAAK,0BAA0B,IAAIA,EAAO,gBAAA;AAAA,EAAgB;AAAA;AAAA;AAAA;AAAA,EAM5D,aAAyB;AACvB,QAAI,CAAC,KAAK;AACR,YAAM,IAAI,MAAM,4DAA4D;AAE9E,WAAO,KAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQd,IAAIL,MAAmBM,GAAmB;AACxC,QAAI,CAAC,KAAK,eAAe;AACvB,cAAQ,KAAK,yDAAyD;AACtE;AAAA,IAAA;AAGF,QAAI,GAAC,KAAK,oBAAoB,CAAC,KAAK,0BAEpC;AAAA,UAAI,CAAC,KAAK,WAAW,cAAcN,CAAM,GAAG;AAC1C,gBAAQ,KAAK,2BAA2BA,CAAM,EAAE;AAChD;AAAA,MAAA;AAGF,WAAK,eAAeA,GAAsB,GAAGM,CAAI;AAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3C,eAAeN,MAAuBM,GAAmB;AAC/D,YAAQN,GAAA;AAAA,MACN,KAAKH,EAAa;AAChB,aAAK,wBAAwB,eAAe,GAAGS,CAAI;AACnD;AAAA,MACF,KAAKT,EAAa;AAChB,aAAK,wBAAwB,kBAAkB,GAAGS,CAAI;AACtD;AAAA,MACF,KAAKT,EAAa;AAChB,aAAK,wBAAwB,uBAAuB,GAAGS,CAAI;AAC3D;AAAA,MACF,KAAKT,EAAa;AAChB,aAAK,wBAAwB,eAAe,GAAGS,CAAI;AACnD;AAAA,IAAA;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAMF,YAAqB;AACnB,WAAO,KAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMd,iBAAyC;AACvC,WAAO,KAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMd,mBAA4B;AAC1B,WAAO,KAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMd,QAAc;AACZ,SAAK,0BAA0B,MAC/B,KAAK,gBAAgB,IACrB,KAAK,mBAAmB,IACxB,KAAK,cAAc,MACnB,KAAK,aAAa,IAAIR,EAAA,GACtB,KAAK,WAAW,WAAA;AAAA,EAAW;AAE/B;"}